/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "../c:\\Users\\devli\\Desktop\\Development\\MHacks-F24\\story-generator\\baml_src\\clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> Groq {\r\n  provider openai-generic\r\n  options {\r\n    base_url \"https://api.groq.com/openai/v1\"\r\n    api_key env.GROQ_API_KEY\r\n    model \"llama3-70b-8192\"\r\n  }\r\n}",
  "../c:\\Users\\devli\\Desktop\\Development\\MHacks-F24\\story-generator\\baml_src\\generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.57.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "../c:\\Users\\devli\\Desktop\\Development\\MHacks-F24\\story-generator\\baml_src\\story.baml": "// Story parameters specified by user\r\nclass StoryParams {\r\n  theme string\r\n  difficulty string\r\n  stage_physical_descriptions string[]\r\n  num_players int\r\n  time_limit_min int\r\n}\r\n\r\n// Story description returned from llm\r\nclass Story {\r\n  intro string\r\n  stage_descriptions string[]\r\n  good_ending string\r\n  bad_ending string\r\n}\r\n\r\n// Call llm to create Story from StoryParams\r\nfunction GenerateStory(params: StoryParams) -> Story {\r\n  client Groq\r\n  prompt #\"\r\n    You are the game master for an escape room.\r\n    The escape room is designed for {{ params.num_players }} players and has a time limit of {{ params.time_limit_min }} minutes.\r\n    The escape room has a theme of {{ params.theme }} and has a difficulty of {{ params.difficulty }}.\r\n\r\n    Players will face the following physical challenges in the escape room: \r\n    {% for stage in params.stage_physical_descriptions %}\r\n    - {{ stage }}\r\n    {% endfor %}\r\n    \r\n    Ensure that the story:\r\n    - Matches the given theme\r\n    - Incorporates all physical challenges seamlessly\r\n    - Is suitable for the specified number of players\r\n    - Presents a level of complexity appropriate for the given difficulty and time limit\r\n\r\n    Return the details of the story in this format:\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}